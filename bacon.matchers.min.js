var Observable,__slice=[].slice;Observable=Bacon.Observable,Observable.prototype.self=function(){return this},Observable.prototype.is=function(){var t,e,n;return e=arguments[0],t=arguments.length>=2?__slice.call(arguments,1):[],null!=(n=this[e])?n.apply(this,t):void 0},Observable.prototype.not=function(){var t,e;return t=arguments.length>=1?__slice.call(arguments,0):[],e=!this.is.apply(this,t),Bacon.constant(e)},Observable.prototype.equals=function(t){return this.map(function(e){return e===t})},Observable.prototype.matches=function(t){return this.map(function(e){return null!=t?t.test(e):void 0})},Observable.prototype.field=function(t){return this.map("."+t)},Observable.prototype.toNumber=function(){return this.map(function(t){return isFinite(t)?parseFloat(t):t})},Observable.prototype["in"]=function(t){return this.map(function(e){return Bacon._.contains(t,e)})},Observable.prototype.isArray=function(){return this.map(function(t){return t instanceof Array})},Observable.prototype.inRange=function(t,e){return t===e?this.equals(t):this.map(function(n){return e>t?n>=t&&e>=n:n>=e&&t>=n})},Observable.prototype.isBetween=function(t,e){return t===e?this.equals(t):this.map(function(n){return e>t?n>t&&e>n:n>e&&t>n})};