var __slice=[].slice;Bacon.Observable.prototype.self=function(){return this},Bacon.Observable.prototype["in"]=function(t){return this.map(function(n){return Bacon._.contains(t,n)})},Bacon.Observable.prototype.equal=function(t){return this.map(function(n){return n===t})},Bacon.Observable.prototype.isArray=function(){return this instanceof Array},Bacon.Observable.prototype.is=function(){var t,n;return n=arguments[0],t=arguments.length>=2?__slice.call(arguments,1):[],this[n].apply(this,t)},Bacon.Observable.prototype.not=function(){var t,n;return t=arguments.length>=1?__slice.call(arguments,0):[],n=!this.is.apply(this,t),Bacon.constant(n)},Bacon.Observable.prototype.matches=function(t){return this.map(function(n){return t.test(n)})},Bacon.Observable.prototype.field=function(t){return this.map("."+t)},Bacon.Observable.prototype.inRange=function(t,n){return t===n?this.equal(t):this.map(function(e){if("number"==typeof t&&"number"==typeof n)return n>t?e>=t&&n>=e:e>=n&&t>=e;throw Error("Argument(s) is not a number")})},Bacon.Observable.prototype.isBetween=function(t,n){return t===n?this.equal(t):this.map(function(e){if("number"==typeof t&&"number"==typeof n)return n>t?e>t&&n>e:e>n&&t>e;throw Error("Argument(s) is not a number")})},Bacon.Observable.prototype.toNumber=function(){return this.map(function(t){return t<<0===t?parseInt(t,10):parseFloat(t)})};